// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for future authentication
model User {
  id            String         @id @default(cuid())
  email         String?        @unique
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
  customModels  CustomModel[]
  apiKeys       UserApiKey[]
}

// Conversation model to group messages
model Conversation {
  id        String    @id @default(cuid())
  title     String?
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}

// Message model for chat history
model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         String // "user" or "ai"
  content        String
  model          String?
  mcpToolsUsed   String? // JSON string of MCP tools used
  createdAt      DateTime     @default(now())

  @@index([conversationId])
}

// Custom model configuration
model CustomModel {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  modelId     String   // The actual model ID to use with the provider
  provider    String   // "openai", "gemini", "claude", "openrouter"
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([provider])
}

// User API keys for different providers
model UserApiKey {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider  String   // "openai", "gemini", "claude", "openrouter"
  keyName   String   // Display name for the key
  encryptedKey String // Encrypted API key
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, provider, keyName])
  @@index([userId])
  @@index([provider])
}

