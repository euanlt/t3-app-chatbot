// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for future authentication
model User {
  id            String         @id @default(cuid())
  email         String?        @unique
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
  customModels  CustomModel[]
  apiKeys       UserApiKey[]
  files         File[]
}

// Conversation model to group messages
model Conversation {
  id        String    @id @default(cuid())
  title     String?
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}

// Message model for chat history
model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         String // "user" or "ai"
  content        String       @db.Text
  model          String?
  mcpToolsUsed   String?      @db.Text // JSON string of MCP tools used
  createdAt      DateTime     @default(now())

  @@index([conversationId])
}

// Custom model configuration
model CustomModel {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  modelId     String   // The actual model ID to use with the provider
  provider    String   // "openai", "gemini", "claude", "openrouter"
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([provider])
}

// User API keys for different providers
model UserApiKey {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider  String   // "openai", "gemini", "claude", "openrouter"
  keyName   String   // Display name for the key
  encryptedKey String       @db.Text // Encrypted API key
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, provider, keyName])
  @@index([userId])
  @@index([provider])
}

// File model for uploaded documents
model File {
  id            String   @id @default(cuid())
  userId        String?
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  filename      String   // Stored filename
  originalName  String   // Original filename from user
  mimetype      String
  size          Int
  path          String?  // File storage path
  extractedText String?      @db.Text // Extracted text content
  status        String   @default("pending") // pending, processing, completed, failed
  error         String?      @db.Text // Error message if processing failed
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // RAG relationships
  embeddings    DocumentEmbedding[]

  @@index([userId])
  @@index([status])
}

// Document embeddings for RAG
model DocumentEmbedding {
  id          String   @id @default(cuid())
  fileId      String
  file        File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  chunkIndex  Int      // Order of chunk in original document
  content     String   @db.Text // The actual text content of this chunk
  embedding   Json?    // Vector embedding stored as JSON
  metadata    Json     @default("{}") // Additional metadata (page number, headers, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([fileId])
  @@map("document_embeddings")
}

